#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Telegram PDF Chat Bot
--------------------
–ë–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∏—Ö —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç ChatPDF API –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤.
"""

import os
import re
import requests
import asyncio
import nest_asyncio
from typing import Dict, List, Optional
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    BotCommand
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
)

# –ü—Ä–∏–º–µ–Ω—è–µ–º nest_asyncio –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤ —Å–æ–±—ã—Ç–∏–π
nest_asyncio.apply()

# ------------------------------------------------------------------------------
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò –ö–û–ù–°–¢–ê–ù–¢–´
# ------------------------------------------------------------------------------

# API —Ç–æ–∫–µ–Ω—ã –∏ –∫–ª—é—á–∏
TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
if not TELEGRAM_BOT_TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN environment variable is not set. Please check your .env file.")

CHATPDF_API_KEY = os.environ.get("CHATPDF_API_KEY")
if not CHATPDF_API_KEY:
    raise ValueError("CHATPDF_API_KEY environment variable is not set. Please check your .env file.")

# API endpoints –¥–ª—è ChatPDF
CHATPDF_API = {
    "ADD_FILE": "https://api.chatpdf.com/v1/sources/add-file",
    "CHAT": "https://api.chatpdf.com/v1/chats/message",
    "DELETE": "https://api.chatpdf.com/v1/sources/delete"
}

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
# user_id: {
#     "sourceId": str,          # ID –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ ChatPDF
#     "messages": List[dict],   # –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
#     "current_pdf": str        # –ò–º—è —Ç–µ–∫—É—â–µ–≥–æ PDF —Ñ–∞–π–ª–∞
# }
user_data: Dict[int, Dict] = {}

# ------------------------------------------------------------------------------
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ------------------------------------------------------------------------------

def format_text(text: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞:
    - –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç **—Ç–µ–∫—Å—Ç** –≤ HTML-—Ç–µ–≥–∏ <b>—Ç–µ–∫—Å—Ç</b>
    - –î–æ–±–∞–≤–ª—è–µ—Ç –∏–∫–æ–Ω–∫—É –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º
    """
    formatted = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', text)
    return f"ü§ñ –û—Ç–≤–µ—Ç:\n{formatted}"

def create_inline_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏"""
    keyboard = [
        [InlineKeyboardButton("üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π PDF", callback_data="new_chat")],
        [InlineKeyboardButton("üîÑ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data="clear_history")]
    ]
    return InlineKeyboardMarkup(keyboard)

# ------------------------------------------------------------------------------
# –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° CHATPDF API
# ------------------------------------------------------------------------------

def upload_pdf_to_chatpdf(file_path: str) -> str:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç PDF —Ñ–∞–π–ª –≤ ChatPDF API.
    Returns:
        str: ID –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    Raises:
        requests.exceptions.RequestException: –ø—Ä–∏ –æ—à–∏–±–∫–µ API
    """
    headers = {"x-api-key": CHATPDF_API_KEY}
    with open(file_path, "rb") as pdf_file:
        files = {
            "file": (
                os.path.basename(file_path),
                pdf_file,
                "application/pdf"
            )
        }
        response = requests.post(CHATPDF_API["ADD_FILE"], headers=headers, files=files)
    response.raise_for_status()
    return response.json()["sourceId"]

def ask_chatpdf(source_id: str, messages: List[Dict]) -> Dict:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å –∫ ChatPDF API –∏ –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç.
    Args:
        source_id: ID –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ ChatPDF
        messages: –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    Returns:
        Dict: –û—Ç–≤–µ—Ç –æ—Ç API
    """
    headers = {
        "x-api-key": CHATPDF_API_KEY,
        "Content-Type": "application/json"
    }
    payload = {
        "sourceId": source_id,
        "referenceSources": True,
        "messages": messages
    }
    response = requests.post(CHATPDF_API["CHAT"], headers=headers, json=payload)
    response.raise_for_status()
    return response.json()

def delete_pdf_from_chatpdf(source_id: str) -> None:
    """–£–¥–∞–ª—è–µ—Ç PDF –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ ChatPDF API"""
    headers = {
        "x-api-key": CHATPDF_API_KEY,
        "Content-Type": "application/json"
    }
    payload = {"sources": [source_id]}
    response = requests.post(CHATPDF_API["DELETE"], headers=headers, json=payload)
    response.raise_for_status()

# ------------------------------------------------------------------------------
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î
# ------------------------------------------------------------------------------

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    welcome_message = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PDF –ß–∞—Ç –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç!\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å PDF –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∏—Ö —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é. –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n\n"
        "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ PDF —Ñ–∞–π–ª\n"
        "2Ô∏è‚É£ –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–≤–∞–π—Ç–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é\n"
        "3Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reset —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç\n\n"
        "üìù –°–æ–≤–µ—Ç—ã:\n"
        "‚Ä¢ –ó–∞–¥–∞–≤–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ª—É—á—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤\n"
        "‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π PDF –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è\n"
        "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –±–µ—Å–µ–¥—ã —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –¥–æ —Å–±—Ä–æ—Å–∞\n\n"
        "–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å? –û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF! üìö"
    )
    await update.message.reply_text(welcome_message)

async def reset_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset - –æ—á–∏—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –∏ –∏—Å—Ç–æ—Ä–∏—é"""
    user_id = update.effective_user.id
    
    if user_id not in user_data:
        await update.message.reply_text(
            "‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã!"
        )
        return
    
    pdf_name = user_data[user_id].get("current_pdf", "–¥–æ–∫—É–º–µ–Ω—Ç")
    user_data.pop(user_id)
    
    await update.message.reply_text(
        f"‚ú® –£—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–æ!\n\n"
        f"‚Ä¢ –û—á–∏—â–µ–Ω: {pdf_name}\n"
        f"‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –±–µ—Å–µ–¥—ã —É–¥–∞–ª–µ–Ω–∞\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π PDF, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã!"
    )

# ------------------------------------------------------------------------------
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô
# ------------------------------------------------------------------------------

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç PDF —Ñ–∞–π–ª—ã, –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Ö –≤ ChatPDF –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.
    """
    document = update.message.document
    file_name = document.file_name or "document.pdf"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞
    if not file_name.lower().endswith(".pdf"):
        await update.message.reply_text(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª.\n\n"
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –∏–º–µ–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .pdf"
        )
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    status_message = await update.message.reply_text(
        f"üì§ –û–±—Ä–∞–±–æ—Ç–∫–∞: {file_name}\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ —è –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–æ–∫—É–º–µ–Ω—Ç..."
    )
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ
    file_id = document.file_id
    new_file = await context.bot.get_file(file_id)
    local_path = f"{update.effective_user.id}.pdf"
    await new_file.download_to_drive(local_path)

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º PDF –≤ ChatPDF
        source_id = upload_pdf_to_chatpdf(local_path)
        user_id = update.effective_user.id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
        user_data[user_id] = {
            "sourceId": source_id,
            "messages": [],
            "current_pdf": file_name
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
        success_message = (
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {file_name}\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ –ó–∞–¥–∞–≤–∞—Ç—å –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç—É\n"
            "‚Ä¢ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–π PDF –¥–ª—è —Å–º–µ–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /reset –¥–ª—è –æ—á–∏—Å—Ç–∫–∏\n\n"
            "–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —É–∑–Ω–∞—Ç—å –æ –≤–∞—à–µ–º PDF? ü§î"
        )
        await status_message.edit_text(success_message)
        
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        error_message = (
            "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF.\n\n"
            f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –ª–∏ PDF\n"
            "‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –∑–∞—â–∏—â–µ–Ω –ø–∞—Ä–æ–ª–µ–º\n"
            "‚Ä¢ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–π PDF"
        )
        await status_message.edit_text(error_message)
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists(local_path):
            os.remove(local_path)

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –∫ ChatPDF API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã.
    """
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ PDF
    if user_id not in user_data:
        await update.message.reply_text(
            "üì• –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª!\n\n"
            "–ú–Ω–µ –Ω—É–∂–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç, —á—Ç–æ–±—ã –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã."
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
    question = update.message.text.strip()
    source_id = user_data[user_id]["sourceId"]
    messages_history = user_data[user_id]["messages"]
    messages_history.append({"role": "user", "content": question})

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
    await context.bot.send_chat_action(
        chat_id=update.effective_chat.id,
        action="typing"
    )

    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç ChatPDF
        response = ask_chatpdf(source_id, messages_history)
        answer = response.get("content", "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.")
        messages_history.append({"role": "assistant", "content": answer})
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        formatted_answer = format_text(answer)
        await update.message.reply_text(
            formatted_answer,
            parse_mode="HTML",
            reply_markup=create_inline_keyboard()
        )
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞
        error_message = (
            "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å.\n\n"
            f"–û—à–∏–±–∫–∞: {str(e)}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "‚Ä¢ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /reset –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å PDF —Å–Ω–æ–≤–∞"
        )
        await update.message.reply_text(error_message)

async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    user_id = query.from_user.id

    if query.data == "new_chat":
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in user_data:
            user_data.pop(user_id)
        await query.answer("–ù–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞! üÜï")
        await query.message.reply_text(
            "–ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—É! üìö\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
        )
    elif query.data == "clear_history":
        if user_id in user_data:
            # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
            user_data[user_id]["messages"] = []
            await query.answer("–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞! üßπ")
            await query.message.reply_text(
                "–ò—Å—Ç–æ—Ä–∏—è –±–µ—Å–µ–¥—ã –æ—á–∏—â–µ–Ω–∞.\n"
                "–í–∞—à PDF –≤—Å–µ –µ—â–µ –∑–∞–≥—Ä—É–∂–µ–Ω - –∑–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã!"
            )
        else:
            await query.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏!")

# ------------------------------------------------------------------------------
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò –ó–ê–ü–£–°–ö –ë–û–¢–ê
# ------------------------------------------------------------------------------

async def setup_commands(app) -> None:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞"""
    commands = [
        BotCommand("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        BotCommand("reset", "–û—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –∏ –∏—Å—Ç–æ—Ä–∏—é")
    ]
    await app.bot.set_my_commands(commands)

async def main_async() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ PDF –ß–∞—Ç –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("reset", reset_command))
    app.add_handler(MessageHandler(filters.Document.PDF, handle_document))
    app.add_handler(MessageHandler(filters.TEXT, handle_text))
    app.add_handler(CallbackQueryHandler(callback_handler))
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    await setup_commands(app)
    
    print("‚ú® –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF!")
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main_async())

